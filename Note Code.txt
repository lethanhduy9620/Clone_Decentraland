// Code xử lý việc tràn overflow trong version 8.0.0
// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0; 
// pragma solidity >=0.7.0 <=0.7.6; 
// pragma solidity ^0.4.24

// ! Bug: If x is minus value, when call function encodeTokenId with x = - 20, y = 20 => this will generate error at line uint(x) * factor with error: 
// ! Error description: The called function should be payable if you send value and the value you send should be less than your current balance.
Bug overflow of version 0.8.0

contract Test {
    uint256 public constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;
    uint256 public constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;
    uint256 public constant factor = 0x100000000000000000000000000000000;

   function encodeTokenId(int x, int y) external pure returns (uint) {
    return _encodeTokenId(x, y);
  }

  function _encodeTokenId(int x, int y) internal pure returns (uint result) {
    require(
      -1000000 < x && x < 1000000 && -1000000 < y && y < 1000000,
      "The coordinates should be inside bounds"
    );
    return _unsafeEncodeTokenId(x, y);
  }

  function _unsafeEncodeTokenId(int x, int y) internal pure returns (uint) {
     unchecked{return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);} // ! Để vấn đề này vô là hết bug
  }
}

// Code xử lý việc dùng interfaceId
How to use ERC165 & how to calculate interfaceId
// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.0 <0.9.0; 

interface IERC165 {
  function supportsInterface(bytes4 interfaceID) external view returns (bool);
}

contract ERC165 is IERC165 {
  //Write a byte calculation interface function algorithm
  function calcFignerPrintAutomated() public  pure returns(bytes4) {
    // return bytes4(keccak256('supportsInterface(bytes4)'));
    
    return type(IERC165).interfaceId;
  }

  function calcFignerPrintManual() public pure returns(bytes4) {
    return bytes4(keccak256('supportsInterface(bytes4)'));
  }
  
  //Hash table to keep track of contract fingerprint data of byte function conversions
  mapping(bytes4 => bool) private _supportInterfaces;

  function supportsInterface(bytes4 interfaceID) external override  view returns (bool) {
    return _supportInterfaces[interfaceID];
  } 

  // registering the interface
  function _registerInterface(bytes4 interfaceId) public {
      require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
      _supportInterfaces[interfaceId] = true;
  }
}
